#!/usr/bin/ruby

class Log

    def Log.usage(msg = nil)
        print msg + "\n" if msg
        print "saftest [--verbose] \n"
        print "         create [--from-xml <xml file>]\n"
        print "         start\n"
        print "         stop\n"
        print "         delete\n"
        print "         report\n"
        exit 1
    end

    def Log.errExit(msg)
        print msg + "\n"
        exit 1
    end

    def initialize(verbose = false)
        @verbose = verbose
    end

    def setVerbose(verbose) 
        @verbose = verbose 
    end

    def print(msg, verbose = false)
        if (@verbose or @verbose == verbose) then
            $stdout.print msg + "\n"
        end
    end
end # class

module SAFTest

sourceDir = nil
if ENV.has_key?('SAFTEST_DEVEL_ROOT')
    sourceDir = ENV['SAFTEST_DEVEL_ROOT']
else
    optDirExists = true
    begin
        entries = Dir.entries('/opt/saftest')
    rescue SystemCallError
        optDirExists = false
    end
    if optDirExists
        sourceDir = '/opt/saftest'
    end
end
if sourceDir == nil
    Log.errExit("Unable to find a source directory.  Either set the SAFTEST_DEVEL_ROOT env variable or install SAFTest to /opt/saftest")
end

$: << "%s/lib" % [sourceDir]

require 'SAFTestUtils'
require 'SAFTestConfig'
require 'SAFTestEngine'
require 'SAFTestBundle'
require 'SAFTestReport'

# globals
$log = Log.new()
$utils = SAFTestUtils.new()
$utils.setLogLevel(-1)
op = nil

while (true)
    opt = ARGV.shift;

    if opt == '--verbose' then
        $log.setVerbose(true)
    elsif opt == '--help' then
        Log.usage()
    elsif opt != nil and opt[1,1] == '-' then
        Log.usage("Invalid option: #{opt}")
    else
        op = opt
        if op == nil
            Log.usage()
        end
        break
    end
end

if op == 'create'
    nodes = []
    xmlConfig = nil
    while (true)
        opt = ARGV.shift;

        if opt == '--from-xml' then
            opt = ARGV.shift
            xmlConfig = opt 
        elsif opt != nil and opt[1,1] == '-' then
            Log.usage("Invalid option: #{opt}")
        else
            break
        end
    end

    rootDirExists = true
    begin
        entries = Dir.entries($utils.rootDir)
    rescue SystemCallError
        rootDirExists = false
    end

    if rootDirExists
        Log.errExit("Directory %s already exists" % [$utils.rootDir])
    else
        $utils.setupRootDir()
    end

    if xmlConfig != nil
        config = SAFTestConfig.new
        config.loadFromXML(xmlConfig)
    else
        implementations = []
        begin
            Dir.new("%s/implementation" % [$utils.rootDir]).each do |d|
                begin
                    # "d" must be a directory.  See if it starts with a letter
                    # or number
                    if d =~ /^[A-z0-9].*/
                        implementations << d
                    end
                rescue SystemCallError
                    print "error"
                end
            end
        rescue SystemCallError
            Log.errExit("%s/implementation doesn't exist" % [$utils.rootDir])
        end

        if implementations.length == 0
            Log.errExit("%s/implementation has no entries" % [$utils.rootDir])
        end

        config = SAFTestConfig.new
        config.promptArray('main', 'testType', 'Test Type', 
                           ['conformance', 'functional'], 'functional')
        if config.getStrValue('main', 'testType') == 'functional'
            config.promptStr('main', 'testDuration', 'Duration', '30m') {
                |value| value =~ /\d+m/ or value =~ /\d+h/
            }
        end
            
        config.promptList('main', 'testNodes', 'Test Nodes', [], false)

        nodes = config.getStrListValue('main', 'testNodes')
        shortLivedDefault = nodes[(nodes.length + 1) / 2, nodes.length]
        config.promptList('main', 'testShortLivedNodes', 'Short Lived Nodes', 
                          shortLivedDefault, true)

        config.promptArray('main', 'implementation', 'Implementation', 
                           implementations, implementations[0])
        config.promptInt('main', 'numLongLivedDrivers', 
                         'Number of Long-Lived Drivers', 1, 10, 3)
        SAFTestUtils.SUPPORTED_SPECS.each do |spec|
            config.promptYesNo('main', "testSpec#{spec}", "Test #{spec}", true)
            if config.valueIsYes('main', "testSpec#{spec}")
                libDriver = "%s/%s_driver.so" % [$utils.objDir(),
                                                 spec.downcase()]
                if not FileTest.exists?(libDriver)
                    Log.errExit("#{libDriver} does not exist")
                end
            end
        end
    end
    config.save()

    # Validate the implementation files are correct
    commandsFile = "%s/implementation/%s/implementation.xml" % 
                   [$utils.rootDir, 
                    config.getStrValue('main', 'implementation')]
    f = open(File.expand_path(commandsFile), 'r')

    # Copy the appropriate bundle file into the ork directory

    mainBundleFile = "%s/conf/%s_bundle.xml" % 
                 [$utils.rootDir, config.getStrValue('main', 'testType')]
    bundle = SAFTestEngine::SAFTestBundle.new(mainBundleFile)
    SAFTestUtils.SUPPORTED_SPECS.each do |spec|
        if config.valueIsYes('main', "testSpec#{spec}")
            specBundleFile = "%s/cases/%s/conf/%s_bundle.xml" %
                             [$utils.rootDir, 
                              spec.downcase(),
                              config.getStrValue('main', 'testType')]
            specBundle = SAFTestEngine::SAFTestBundle.new(specBundleFile)
            bundle.addSpecCases(spec.downcase(), specBundle.cases())
        end
    end
    bundle.writeToXML($utils.bundleFile)

    # Copy the implementation files into the work directory
    cmd = "cp -a %s/implementation/%s/* %s" % 
          [$utils.rootDir, 
           config.getStrValue('main', 'implementation'),
           $utils.implementationDir]
    $utils.runAndCheckCommand(cmd, SAFTestUtils::EXPECT_SUCCESS,
                              "Error running #{cmd}")
    nodes = config.getStrListValue('main', 'testNodes')
    nodes.each do |node|
        next if node == $utils.simpleHostname()
        $log.print("Syncing %s to node #{node}" % [$utils.rootDir])
        cmd = "mkdir -p %s" % [$utils.rootDir]
        $utils.runAndCheckCommand(cmd, SAFTestUtils::EXPECT_SUCCESS,
                                  "Error running #{cmd}", node)

        cmd = "scp -r %s/* #{node}:%s" % [$utils.rootDir, $utils.rootDir]
        $utils.runAndCheckCommand(cmd, SAFTestUtils::EXPECT_SUCCESS,
                                  "Error running #{cmd}")
    end
elsif op == 'start'
    engine = SAFTestEngine::SAFTestEngine.new()
    engine.start()
elsif op == 'stop'
    engine = SAFTestEngine::SAFTestEngine.new()
    engine.stop()
elsif op == 'report'
    report = SAFTestReport.new()
    report.printReport()
elsif op == 'delete'
    cmd = 'rm -rf %s' % [$utils.rootDir]
    if File.exists?($utils.configXMLFile())
        config = SAFTestConfig.new()
        config.loadFromXML($utils.configXMLFile())
        nodes = config.getStrListValue('main', 'testNodes')
        nodes.each do |node|
            $utils.runAndCheckCommand(cmd, SAFTestUtils::EXPECT_SUCCESS, 
                                      "Error running %s" % [cmd], node)
        end
    else
        $utils.runAndCheckCommand(cmd, SAFTestUtils::EXPECT_SUCCESS, 
                                  "Error running %s" % [cmd])
    end
else
    Log.usage("unknown operation: %s" % [op])
end

end # module SAFTest
