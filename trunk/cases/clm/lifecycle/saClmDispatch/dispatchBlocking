#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'

clmDir = "%s/cases/clm" % [ENV['SAFTEST_ROOT']]
$: << clmDir
require 'CLMTestDriver'

class DispatchBlockingCase < SAFTestCase
    @@TIMES_TO_RUN = 6

    def initialize()
        super()
    end
     
    def run()
        # The threads should already be sitting in DISPATCH_BLOCKING for
        # the global session
        d = CLMTestDriver.getRandomLongLivedDriver(:THREADED => true)
        session = d.getRandomLongLivedSession(:GLOBAL => true)
        invocation = d.generateInvocation()
        thread1 = d.getRandomWorkerThread()
        thread2 = d.getRandomWorkerThread(:THREAD_EXCLUDE_SET => [thread1])
        threadArray = [thread1, thread2]
        d.clusterNodeGetResetCBCount(:SESSION => session)
        d.clusterNodeGetCBCount(:SESSION => session, :EXPECTED_COUNT => 0)
        for i in 1..@@TIMES_TO_RUN
            d.clusterNodeGetAsyncWithInvocation(:SESSION => session, 
                                                :INVOCATION => invocation,
                                                :NODE_ID => 
                                                    "SA_CLM_LOCAL_NODE_ID",
                                                :THREAD => threadArray[i % 2])
        end
        d.waitForClusterNodeGetCBCount(:SESSION => session, 
                                       :EXPECTED_COUNT => @@TIMES_TO_RUN)
        passed()
    end
end

test = DispatchBlockingCase.new()
test.run()

end # module
