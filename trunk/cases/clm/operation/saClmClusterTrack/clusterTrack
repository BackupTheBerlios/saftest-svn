#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'
require 'SAFTestUtils'

clmDir = "%s/cases/clm" % [ENV['SAFTEST_ROOT']]
$: << clmDir
require 'CLMTestDriver'

class ClusterTrackCase < SAFTestCase
    def initialize()
        super()
    end

    def run()
        d = CLMTestDriver.getRandomLongLivedDriver()
        session = d.getMainLongLivedSession()
        validateCluster = nil
        validateNode = nil
        numberOfItems = 0
        trackCurrent = false
        trackChanges = false
        trackChangesOnly = false
        invalidTrackFlags = false
        nullNotificationBuffer = false
        nullClusterNotification = false
        validateCluster = nil
        nodeName = nil

        if getParam('track-current') == 'yes'
            trackCurrent = true
            validateCluster = d.getImplementation().getCluster()
            numberOfItems = validateCluster.getNodes().length
        end
        if getParam('track-changes') == 'yes'
            trackChanges = true
        end
        if getParam('track-changes-only') == 'yes'
            trackChangesOnly = true
        end

        if trackChanges == true and trackChangesOnly == true
            failed("Can not specify track-changes and track-changes-only concurrently")
        end 

        d.clusterTrack(:SESSION => session, 
                       :TRACK_CURRENT => trackCurrent, 
                       :TRACK_CHANGES => trackChanges, 
                       :TRACK_CHANGES_ONLY => trackChangesOnly, 
                       :INVALID_TRACK_FLAGS => invalidTrackFlags, 
                       :NULL_NOTIFICATION_BUFFER => nullNotificationBuffer, 
                       :NULL_CLUSTER_NOTIFICATION => nullClusterNotification, 
                       :NUMBER_OF_ITEMS => numberOfItems, 
                       :VALIDATE_CLUSTER => validateCluster)
        passed()
    end
end

test = ClusterTrackCase.new()
test.run()

end # module
