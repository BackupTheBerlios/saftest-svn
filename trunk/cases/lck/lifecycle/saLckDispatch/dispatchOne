#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'

lckDir = "%s/cases/lck" % [ENV['SAFTEST_ROOT']]
$: << lckDir
require 'LCKTestDriver'

class DispatchOneLckCase < SAFTestCase
    @@INVOCATION = $$
    @@WAITER_SIGNAL = $$
    def initialize()
        super()
    end

    def run()
        d1 = LCKTestDriver.getRandomLongLivedDriver()
        session1 = d1.createShortLivedSession()
        d1.init(:SESSION => session1, :DISPATCH_FLAGS => "SA_DISPATCH_ONE")
        d1.resourceOpen(:SESSION => session1, :LOCK_NAME => "dpOne")
        d1.lockSync(:SESSION => session1, :LOCK_MODE => 'EX',
                    :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_GRANTED')

        d2 = LCKTestDriver.getRandomLongLivedDriver(:EXCLUDE_DRIVER_SET => [d1])
        session2 = d2.createShortLivedSession()
        d2.init(:SESSION => session2, :DISPATCH_FLAGS => "SA_DISPATCH_ONE")
        d2.resourceOpen(:SESSION => session2, :LOCK_NAME => "dpOne")
        d2.lockAsync(:SESSION => session2, :LOCK_MODE => 'EX', 
                     :INVOCATION => @@INVOCATION + 1, 
                     :WAITER_SIGNAL => @@WAITER_SIGNAL)

        session3 = d2.createShortLivedSession()
        d2.init(:SESSION => session3, :DISPATCH_FLAGS => "SA_DISPATCH_ONE")
        d2.resourceOpen(:SESSION => session3, :LOCK_NAME => "dpOne")
        d2.lockAsync(:SESSION => session3, :LOCK_MODE => 'EX', 
                     :INVOCATION => @@INVOCATION + 2, 
                     :WAITER_SIGNAL => @@WAITER_SIGNAL)

        # Verify initial data
        d1.waitForWaiterNotificationCount(:SESSION => session1,
                            :EXPECTED_LAST_WAITER_SIGNAL => 0, 
                            :EXPECTED_NOTIFICATION_COUNT => 0) 
        d1.dispatch(:SESSION => session1, 
                    :DISPATCH_FLAGS => "SA_DISPATCH_ONE")
        d1.waitForWaiterNotificationCount(:SESSION => session1,
                            :EXPECTED_LAST_WAITER_SIGNAL => @@WAITER_SIGNAL, 
                            :EXPECTED_NOTIFICATION_COUNT => 1) 

        d1.dispatch(:SESSION => session1, 
                    :DISPATCH_FLAGS => "SA_DISPATCH_ONE")
        d1.waitForWaiterNotificationCount(:SESSION => session1,
                            :EXPECTED_LAST_WAITER_SIGNAL => @@WAITER_SIGNAL, 
                            :EXPECTED_NOTIFICATION_COUNT => 2) 

        d2.resourceClose(:SESSION => session2)
        d2.finalize(:SESSION => session2)
        d2.deleteSession(:SESSION => session2)

        d2.resourceClose(:SESSION => session3)
        d2.finalize(:SESSION => session3)
        d2.deleteSession(:SESSION => session3)

        d1.resourceClose(:SESSION => session1)
        d1.finalize(:SESSION => session1)
        d1.deleteSession(:SESSION => session1)
        passed()
    end
end


test = DispatchOneLckCase.new()
test.run()

end #module
