#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'

lckDir = "%s/cases/lck" % [ENV['SAFTEST_ROOT']]
$: << lckDir
require 'LCKTestDriver'

class LockEXCase < SAFTestCase
    def initialize()
        super()
    end
#tests the lock with a timeout value
#that lock is granted if lock is freed before
#timeout timer pops
#
#First EX lock is granted
#Second EX lock is pending with timeout of 10 seconds -- in nanoseconds 10*1000000000
#sleep 5 seconds and free first EX lock
#Pending EX lock with timeout set should be granted 

    def run()
        d1 = LCKTestDriver.startNewShortLivedDriver()
        session1 = d1.createShortLivedSession()
        d1.init(:SESSION => session1, :DISPATCH_FLAGS => "SA_DISPATCH_ALL")
        d1.resourceOpen(:SESSION => session1, 
                        :LOCK_NAME => "lockExclusiveWithTimerTwice")
        d1.lockSync(:SESSION => session1, :LOCK_MODE => 'EX', 
                    :LOCK_FLAG_NO_QUEUE => true, 
                    :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_GRANTED')

        d2 = LCKTestDriver.getRandomLongLivedDriver()
        session2 = d2.createShortLivedSession()
        d2.init(:SESSION => session2, :DISPATCH_FLAGS => "SA_DISPATCH_ALL")
        d2.resourceOpen(:SESSION => session2, 
                        :LOCK_NAME => "lockExclusiveWithTimerTwice")
        action = d2.lockSyncBG(:SESSION => session2, 
                               :LOCK_MODE => 'EX', :TIMEOUT => 10000000000,
                               :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_GRANTED')
        sleep(5)
        d1.stop()
        d2.waitForLockSyncBG(:ACTION => action)

        d2.resourceClose(:SESSION => session2)
        d2.finalize(:SESSION => session2)
        d2.deleteSession(:SESSION => session2)
        passed()
    end
end

test = LockEXCase.new()
test.run()

end # module
