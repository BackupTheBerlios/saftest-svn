#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'

lckDir = "%s/cases/lck" % [ENV['SAFTEST_ROOT']]
$: << lckDir
require 'LCKTestDriver'

class AsyncLockEXCase < SAFTestCase
    @@INVOCATION = $$

    def initialize()
        super()
    end

    def run()
        d = LCKTestDriver.getRandomLongLivedDriver(nil)
        resource = d.createShortLivedTestResource()
        d.init(resource, true, true, true, true,
                "SA_DISPATCH_ALL", SAFTestUtils.SA_AIS_OK)
        d.selectObjectGet(resource, false, SAFTestUtils.SA_AIS_OK)
        d.resourceOpen(resource, "lock1", SAFTestUtils.SA_AIS_OK)
        d.lockAsync(resource, 'EX', @@INVOCATION, false, false, false, 
                    false, false, SAFTestUtils.SA_AIS_OK)
        d.waitForLockAsyncLockStatus(resource, @@INVOCATION,
                                     'SA_LCK_LOCK_GRANTED',
                                     SAFTestUtils.SA_AIS_OK)
        d.resourceClose(resource, SAFTestUtils.SA_AIS_OK)
        d.finalize(resource, SAFTestUtils.SA_AIS_OK)
        d.deleteTestResource(resource)
        passed()
    end
end

test = AsyncLockEXCase.new()
test.run()

end # module
