#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'

lckDir = "%s/cases/lck" % [ENV['SAFTEST_ROOT']]
$: << lckDir
require 'LCKTestDriver'

# This test case acquires a lock on a remote node, then attempts to 
# acquire it on the local node, which shouldn't succeed until we kill
# the remote node.

class AsyncLockEXKillRemoteNodeCase < SAFTestCase
    @@INVOCATION = $$
    @@LOCK_NAME = 'AsyncLockExclusiveKillRemoteNode'

    def initialize()
	super()
    end

    def run()
        d = LCKTestDriver.getRandomLongLivedDriver()
        impl = d.getImplementation() 
        cluster = impl.getCluster()
        if cluster.getNodes().length < 2   
            d.log("Need at least 2 nodes to continue, only have %d" % \
                       [cluster.getNodes().length])
        else    
            upNode = nil 
            cluster.getUpNodes().each do |node|
                if !node.isLocalNode()    
                    upNode = node
                    break 
                end  
             end
        end
        if (upNode == nil)
            d.log("Need at least one more node to be up continue")
        end
        d1 = LCKTestDriver.startNewShortLivedDriver(:NODE => upNode)
        session1 = d1.createShortLivedSession()
        d1.init(:SESSION => session1, :DISPATCH_FLAGS => "SA_DISPATCH_ALL")
        d1.resourceOpen(:SESSION => session1, 
                        :LOCK_NAME => "AsyncLockExclusiveKillRemoteNode")
        d1.lockSync(:SESSION => session1, :LOCK_MODE => 'EX',
                    :LOCK_FLAG_NO_QUEUE => true,
                    :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_GRANTED')

        session = d.createShortLivedSession()
        d.init(:SESSION => session, :DISPATCH_FLAGS => "SA_DISPATCH_ALL")
        d.resourceOpen(:SESSION => session, 
                       :LOCK_NAME => "AsyncLockExclusiveKillRemoteNode")
        action = d.lockSyncBG(:SESSION => session, :LOCK_MODE => 'EX',
                              :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_GRANTED')
        d1.stop()
        d.waitForLockSyncBG(:ACTION => action)
        d.resourceClose(:SESSION => session)
        d.finalize(:SESSION => session)
        d.deleteSession(:SESSION => session)
        passed()
    end
end

test = AsyncLockEXKillRemoteNodeCase.new()
test.run()

end # module
