#!/usr/bin/ruby

module SAFTest

$: << "%s/lib" % [ENV['SAFTEST_ROOT']]
require 'SAFTestCase'

lckDir = "%s/cases/lck" % [ENV['SAFTEST_ROOT']]
$: << lckDir
require 'LCKTestDriver'

class AsyncLockEXCase < SAFTestCase
    @@INVOCATION = $$
    def initialize()
        super()
    end

    def run()
        d1 = LCKTestDriver.startNewShortLivedDriver()
        session1 = d1.createShortLivedSession()
        d1.init(:SESSION => session1, :DISPATCH_FLAGS => "SA_DISPATCH_ALL")
        d1.selectObjectGet(:SESSION => session1)
        d1.resourceOpen(:SESSION => session1, :LOCK_NAME => "LockEXLockPR")
        d1.lockAsync(:SESSION => session1, :LOCK_MODE => 'PR', 
                     :INVOCATION=> @@INVOCATION)
        d1.waitForLockAsyncLockStatus(:SESSION => session1, 
                                      :EXPECTED_INVOCATION => @@INVOCATION,
                                      :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_GRANTED')
        d2 = LCKTestDriver.startNewShortLivedDriver()
        session2 = d2.createShortLivedSession()
        d2.init(:SESSION => session2, :DISPATCH_FLAGS => "SA_DISPATCH_ALL")
        d2.selectObjectGet(:SESSION => session2)
        d2.resourceOpen(:SESSION => session2, :LOCK_NAME => "LockEXLockPR")
        d2.lockAsync(:SESSION => session2, :LOCK_MODE => 'EX', 
                     :INVOCATION => @@INVOCATION,
                     :LOCK_FLAG_NO_QUEUE => true)
        d2.waitForLockAsyncLockStatus(:SESSION => session2, 
                                      :EXPECTED_INVOCATION => @@INVOCATION,
                                      :EXPECTED_LOCK_STATUS => 'SA_LCK_LOCK_NOT_QUEUED')
        d1.resourceClose(:SESSION => session1)
        d1.finalize(:SESSION => session1)
        d1.deleteSession(:SESSION => session1)
        d1.stop()

        d2.resourceClose(:SESSION => session2)
        d2.finalize(:SESSION => session2)
        d2.deleteSession(:SESSION => session2)
        d2.stop()
        passed()
    end
end

test = AsyncLockEXCase.new()
test.run()

end # module
