<?xml version="1.0" encoding="us-ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Linux/x86 (vers 1 September 2005), see www.w3.org" />
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii" />

  <title>SAFTest Next Generation - User Guide</title>
  <link type="text/css" rel="stylesheet" href="saftest_style.css" />
<script type="text/javascript" src="saftest_scripts.js">
</script>
</head>

<body onload="generateTOC(); numberSections();">
  <div id="header">
    <h1>SAFTest Next Generation - User Guide</h1>

    <p id="author">Chad Tindel &lt;chad@tindel.net&gt;</p>

    <p id="date">Last Updated 4 April 2006</p>

    <p id="description">Instructions for how to build, configure, and use
    SAFTest Next Generation.</p>

    <ul id="toc"></ul>
  </div>

  <div id="content">
    <div class="section">

      <h2>Overview</h2>

      <p>Various actors in the SAF ecosystem have different needs from a
      testing infrastructure.  Some of these are:</p>
      
      <ul>
        <li>Developers want a quick method to regression 
        test their latest round of changes and the ability to just run one test
        repeatedly to reproduce/debug a defect.</li>

        <li>Test Engineers want the ability to run a comprehensive suite of
        tests in various configurations on multiple platforms.</li>

        <li>Certification bodies want the ability to test a SAF implementation
        for official compliance.  Ease of use and nice reporting is key here
        because the person running the test may not be familiar with the
        particulars of a SAF implementation.</li>
      </ul>

      <p>This document will cover the external interfaces of SAFTest.  First 
      the build process will be discussed, then we will discuss the lifecycle
      of a test, and end with test report generation.</p>
    </div>

    <div class="section">

      <h2>The SAFTest Build System</h2>

      <p>The SAFTest build system is centered around the standard utility
      <i>make</i>.  SAFTest is dependent on an underlying SAF implementation,
      so when you build SAFTest you need to tell it which implementation to
      build against and which SAF specifications you want to test.  This 
      section details a comprehensive set of SAFTest Make variables, and
      shows some examples of how to build SAFTest.
      </p>

      <div class="section">
        <h3>Makefile variables</h3>

        <table>
          <tr>
            <th>Variable Name</th>
            <th>Possible Values</th>
            <th>Default Value</th>
            <th>Description</th>
          </tr>

          <tr>
            <td>IMPLEMENTATION</td>
            <td>Any SAF implementation name</td>
            <td>There is no default value.  You must define this variable.</td>
            <td>Informs the build system which SAF implementation you will
            be building and linking against.</td>
          </tr>

          <tr>
            <td>CLM</td>
            <td>0 or 1</td>
            <td>0</td>
            <td>Informs the build system whether you want to test a CLM
            implementation.</td>
          </tr>

          <tr>
            <td>LCK</td>
            <td>0 or 1</td>
            <td>0</td>
            <td>Informs the build system whether you want to test a LCK
            implementation.</td>
          </tr>
        </table>
          
      </div>

      <div class="section">
        <h3>Build Command Examples</h3>

        <p>Building SAFTest is simple.  There are only two make targets: "all"
        and "clean".  Below are some examples just to explain how to use
        the variables previously described.</p>

        <ul>
          <li>make IMPLEMENTATION=serviceguard CLM=1 all</li> 
          <li>make IMPLEMENTATION=serviceguard CLM=1 LCK=1 all</li> 
          <li>make IMPLEMENTATION=serviceguard CLM=1 LCK=1 clean</li> 
        </ul>
      </div>
    </div>

    <div class="section">

      <h2>The SAFTest Environment</h2>

      <p>This section things you need to do to make SAFTest work in your
      execution environment.</p>

      <div class="section">
        <h3>Environment Variables</h3>

        <p>There is only one environment variable that must be defined in
        the root user's environment.  This variable is called
        <b>SAFTEST_ROOT</b> and must point to the location where your SAFTest
        installation resides.</p>
      </div>
      
      <div class="section">
        <h3>SSH</h3>

        <p>The SAFTest scripts rely on using SSH to be able to execute commands
        on remote machines within the cluster.  You must configure your SSH
        system so that the root user on every cluster node can execute commands
        as the root user on every other cluster node simply by running the
        <i>ssh</i> command.  In order to work properly in scripts, the
        <i>ssh</i> command can not prompt for passphrases, so if your keys
        have passphrases on them you will need to setup the <i>ssh-agent</i>
        before starting SAFTest.</p>
      </div>

      <div class="section">
        <h3>The <i>saftest</i> Command</h3>

        <p>The test operator's interface to SAFTest is the <i>saftest</i>
        command.  This command is used for test creation, administration, and
        report generation.</p>
      </div>
    </div>

    <div class="section">

      <h2>SAFTest Concepts</h2>

      <p>SAFTest tries as hard as possible to shield test operators from
      needing knowledge about SAFTest internals or HA terminology in general.
      However, there are certain concepts that operators should have in order
      to understand how SAFTest works.</p>

      <div class="section">

        <h3>Types of Tests</h3>

        <p>SAFTest is very flexible and can be used in different ways depending
        on your goals.  For example, some test operators might be interested in
        verifying API conformance for official certifications.  Other operators
        might be SAF implementation developers who want to easily be able to
        regression test their changes as they work on bug fixes or new code.
        SAFTest tries to offer something to everybody by having multiple
        test types available.  Below are descriptions of the currently available
        test types.</p>

        <ul>
          <li><b>Conformance</b> - The expected users of Conformance tests are
          the members of an official API conformance certification body, or 
          members of organizations that may be preparing their implementation 
          for API conformance certification.  The Conformance tests are 
          responsible for exercising every function in the API, as well as for 
          extensively checking boundary conditions on API parameters as much 
          as possible.  The conformance test cases run one time only and in a 
          sequential fashion (the same order every time).</li>
          <li><b>Functional</b> - The expected users of Functional tests are
          engineers who are participating in the development or qualification of
          a SAF implementation.  The Functional tests are responsible for
          exercising and stressing functionality that is <b>expected to 
          work</b>.  The functional test cases run in a random order for a 
          pre-determined (configurable) amount of time.</li>
        </ul>
      </div>

      <div class="section">

        <h3>SAFTest Terminology</h3>

        <p>Below is a list of terminology that is useful to know when running
        SAFTest:</p>

        <ul>
          <li><b>Driver</b> - A <i>driver</i> is a C-program inside SAFTest
          that actually calls the SAF API functions.  The purpose of the driver
          is to simulate actions that would be taken by the actual SAF
          applications.</li>
        </ul>
      </div>
    </div>

    <div class="section">

      <h2>Creating a Test</h2>

      <p>The first step in running SAFTest is to create, a test.  When you
      create a test, the configuration script will prompt you with a set of
      questions to determine what you want the test to do.</p>

      <div class="section">
        <h3>Running <i>saftest create</i></h3>

        <p>When you run <i>saftest create</i>, a configuration script will
        prompt you for information it needs to run your test.  This data
        will be stored in a configuration XML file and will be used throughout
        the duration of the test run.  Below is a table of variables you
        will be prompted for:</p>

        <table>
          <tr>
            <th>Variable Name</th>
            <th>Possible Values</th>
            <th>Default Value</th>
            <th>Description</th>
          </tr>

          <tr>
            <td>Test Type</td>
            <td>"conformance" or "functional"</td>
            <td>functional</td>
            <td>Defines the type of test you will be running.  See above
            for a description of the different test types.</td>
          </tr>

          <tr>
            <td>Duration</td>
            <td>"Xm" (X minutes) or "Yh" (Y hours)</td>
            <td>"30m" (30 minutes)</td>
            <td>You will only be prompted for this value when running a test
            that requires a duration setting, such as a functional test.</td>
          </tr>

          <tr>
            <td>Test Nodes</td>
            <td>"node1 node2 node3 node4 ..."</td>
            <td>There is no default value.  You must define this variable.</td>
            <td>Defines the complete set of nodenames in the test cluster.
            Many tests require at least 2 nodes to work correctly.</td>
          </tr>

          <tr>
            <td>Short Lived Nodes</td>
            <td>"node3 node4 ..."</td>
            <td>This will default to the second half of the Test Nodes that
            were specified earlier.</td>
            <td>In general, you want half of your nodes to be long lived and
            half of them to be short lived.  Long lived nodes will always be
            be running.  On short lived nodes test scripts can take down the 
            HA software, the saftest software, or the nodes themselves in
            order to simulate partial system failures.</td>
          </tr>

          <tr>
            <td>Implementation</td>
            <td>Could be any implementation name, such as "serviceguard" or
            "openais".</td>
            <td>There is no default value.  You must define this variable.</td>
            <td>Implementations have custom scripts inside of SAFTest for doing
            implementation specific things like starting/stopping nodes or
            adding/deleting nodes from the cluster configuration.  This option
            tells SAFTest which implementation you will be testing.</td>
          </tr>

          <tr>
            <td>Number of Long Lived Drivers</td>
            <td>1-10</td>
            <td>3</td>
            <td>Defines how many long lived drivers will be running for
            the entire duration of the test on each long lived node.</td>
          </tr>

          <tr>
            <td>Test CLM</td>
            <td>yes/no</td>
            <td>yes</td>
            <td>Tells SAFTest whether you want to test functions from the
            CLM specification.</td>
          </tr>

          <tr>
            <td>Test LCK</td>
            <td>yes/no</td>
            <td>yes</td>
            <td>Tells SAFTest whether you want to test functions from the
            LCK specification.</td>
          </tr>
        </table>
      </div>
      
      <div class="section">
        <h3>Automating Test Creation</h3>

        <p>This is an advanced option that should only be used by test
        operators who really know what they are doing.  For example, an
        engineer working on a SAF implementation always uses the exact same
        test configuration because all of the test parameters are the same
        during development.  Here are the steps for automating test
        creation:</p>

        <ol type="1">
          <li>Perform the manual test creation once</li>
          <li>Save the test configuration file, found at
          $SAFTEST_ROOT/work/conf/saftest.xml to a safe location, say
          ~/saftest.xml</li>
          <li>Now when you want to create a new test, just run 
          <i>saftest create --from-xml ~/saftest.xml</i></li>
        </ol>
      </div>
    </div>

    <div class="section">

      <h2>Running the Test</h2>

      <p>Most of the complication of using SAFTest is in the test configuration
      portion of the test lifecycle.  Once you have configured your test,
      then you simply invoke <i>saftest start</i> to start the test.  At
      anytime you can invoke <i>saftest status</i> to see if the test is still
      running or whether it has stopped.  If you want the test to stop
      pre-maturely you can invoke <i>saftest stop</i>.</p>
    </div>

    <div class="section">

      <h2>Test Reports</h2>

      <p>Test reporting is currently the weakest area in SAFTest today, and
      still has quite a bit of work left before this area is fully functional.
      All you can do right now is get a list of each test case and how many
      times each one passed, skipped, or failed.  In addition, the logs from
      any failed test cases are displayed at the bottom of the report, to aid
      in test debugging.</p>

      <p>To generate a test report, run <i>saftest report</i>.  This will print
      the report on stdout so you may want to redirect it to a file.</p>
    </div>
  </div>
</body>
</html>
